from flask import Flask, request, render_template, send_filefrom docx import Documentfrom docx.shared import Pt, RGBColorimport iofrom datetime import datetimeimport tempfileimport osimport sysfrom io import StringIOapp = Flask(__name__)@app.route('/')def index():    return render_template('index.html')@app.route('/convert', methods=['POST'])def convert():    python_code = request.form['code']    action_type = request.form.get('action_type', 'save_code')        if action_type == 'save_code':        # Opțiunea de a salva codul Python în document        doc = Document()        doc.add_heading('Cod Python', level=1)        doc.add_paragraph(f'Generat la: {datetime.now().strftime("%d-%m-%Y %H:%M:%S")}')        doc.add_paragraph()                code_paragraph = doc.add_paragraph()        for line in python_code.split('\n'):            code_run = code_paragraph.add_run(line + '\n')            code_run.font.name = 'Courier New'            code_run.font.size = Pt(10)                file_stream = io.BytesIO()        doc.save(file_stream)        file_stream.seek(0)                return send_file(            file_stream,            mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document',            as_attachment=True,            download_name='cod_python.docx'        )        elif action_type == 'execute_code':        # Opțiunea de a executa codul Python și de a descărca rezultatul        try:            # Creăm un fișier temporar pentru documentul generat            temp_dir = tempfile.mkdtemp()            temp_file = os.path.join(temp_dir, 'document_generat.docx')                        # Modificăm codul pentru a salva documentul în locația temporară            # Înlocuim orice save() cu salvarea în fișierul nostru temporar            modified_code = python_code            if 'doc.save(' in modified_code:                # Înlocuim linia doc.save() cu linia noastră                lines = modified_code.split('\n')                for i, line in enumerate(lines):                    if 'doc.save(' in line:                        lines[i] = f"doc.save(r'{temp_file}')"                modified_code = '\n'.join(lines)            else:                # Dacă nu există doc.save(), adăugăm la sfârșit                modified_code += f"\n\n# Salvăm documentul în locația temporară\ndoc.save(r'{temp_file}')"                        # Captăm output-ul pentru a evita afișarea în consolă            original_stdout = sys.stdout            original_stderr = sys.stderr            sys.stdout = StringIO()            sys.stderr = StringIO()                        try:                # Creăm un namespace local și executăm codul                local_vars = {}                exec(modified_code, {"__builtins__": __builtins__}, local_vars)                                # Verificăm dacă documentul a fost generat                if os.path.exists(temp_file):                    return send_file(                        temp_file,                        mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document',                        as_attachment=True,                        download_name='document_generat.docx'                    )                else:                    return "Codul a fost executat, dar nu a generat un document Word. Asigurați-vă că codul creează un document utilizând python-docx.", 400            finally:                # Restaurăm stdout și stderr                sys.stdout = original_stdout                sys.stderr = original_stderr                        except Exception as e:            return f"Eroare la executarea codului Python: {str(e)}", 400        else:        return "Acțiune necunoscută", 400if __name__ == '__main__':    app.run(debug=True, port=5001)